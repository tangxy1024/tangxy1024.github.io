<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/06/17/SpringSecurit/"/>
      <url>/2023/06/17/SpringSecurit/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h1><blockquote><p>原文出处</p><p><a href="https://blog.csdn.net/weixin_43847283/article/details/124075302">(126条消息) SpringSecurity-从入门到精通_鱼找水需要时间的博客-CSDN博客</a></p></blockquote><h2 id="一、Maven依赖"><a href="#一、Maven依赖" class="headerlink" title="一、Maven依赖"></a>一、Maven依赖</h2><p><code>    &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.5.0&lt;/version&gt;     &lt;/parent&gt;     &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;             &lt;artifactId&gt;lombok&lt;/artifactId&gt;             &lt;optional&gt;true&lt;/optional&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;</code></p><h2 id="二、认证"><a href="#二、认证" class="headerlink" title="二、认证"></a>二、认证</h2><h3 id="1-登录校验的流程"><a href="#1-登录校验的流程" class="headerlink" title="1. 登录校验的流程"></a>1. 登录校验的流程</h3><p><img src="https://txy-typora.oss-cn-nanjing.aliyuncs.com/image-20220923155434790.png" alt="image-20220923155434790"></p><blockquote><p>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（<a href="https://link.jianshu.com/?t=https://tools.ietf.org/html/rfc7519">(RFC 7519</a>).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p><p>原文出处：<a href="https://www.jianshu.com/p/576dbf44b2ae">什么是 JWT – JSON WEB TOKEN - 简书 (jianshu.com)</a></p></blockquote><h3 id="2-过滤器"><a href="#2-过滤器" class="headerlink" title="2.过滤器"></a>2.过滤器</h3><p><img src="https://txy-typora.oss-cn-nanjing.aliyuncs.com/image-20220923170300272.png" alt="image-20220923170300272"></p><p>(1).<strong>UsernamePasswordAuthenticationFilter</strong>:负责处理我们在登陆页面填写了用户名密码后的登陆请求。入门案例的认证工作主要有它负责。</p><p>(2).<strong>ExceptionTranslationFilter：</strong> 处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException </p><p>(3).<strong>FilterSecurityInterceptor：</strong> 负责权限校验的过滤器。</p><h4 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h4><p><img src="https://txy-typora.oss-cn-nanjing.aliyuncs.com/image-20220923171042154.png" alt="image-20220923171042154"></p><blockquote><p>Spring 封装了 RedisTemplate 对象来进行对redis的各种操作</p><p>[(126条消息) RedisTemplate中opsForValue的使用_harry5508的博客-CSDN博客_redistemplate.opsforvalue().increment]<a href="http://t.csdn.cn/aFh4P">http://t.csdn.cn/aFh4P</a></p></blockquote><h2 id="三、配置过程"><a href="#三、配置过程" class="headerlink" title="三、配置过程"></a>三、配置过程</h2><p>1.登录</p><p>①自定义登录接口</p><p>②自定义UserDetailsService</p><p>2.校验</p><p>①定义Jwt认证过滤器</p><h2 id="四、授权"><a href="#四、授权" class="headerlink" title="四、授权"></a>四、授权</h2><p>在日常的开发过程中，不仅仅只有前端判断用户权限显示相应权限的按钮，同时在后端也要对用户权限进行判断，以免用户通过接口直接进行操作。</p><h3 id="（一）、设置相应资源的访问权限"><a href="#（一）、设置相应资源的访问权限" class="headerlink" title="（一）、设置相应资源的访问权限"></a>（一）、设置相应资源的访问权限</h3><blockquote><p><strong>@EnableGlobalMethodSecurity(prePostEnabled &#x3D; true)</strong></p></blockquote><h3 id="（二）、在UserDetailsService中封装权限信息"><a href="#（二）、在UserDetailsService中封装权限信息" class="headerlink" title="（二）、在UserDetailsService中封装权限信息"></a>（二）、在UserDetailsService中封装权限信息</h3><h2 id="五、自定义失败处理"><a href="#五、自定义失败处理" class="headerlink" title="五、自定义失败处理"></a>五、自定义失败处理</h2><ol><li><p>如果是认证过程中出现的异常会被封装成AuthenticationException然后调用<strong>AuthenticationEntryPoint</strong>对象的方法去进行异常处理。</p></li><li><p>如果是授权过程中出现的异常会被封装成AccessDeniedException然后调用<strong>AccessDeniedHandler</strong>对象的方法去进行异常处理。</p></li></ol><p>   <strong>过程：自定义实现类之后将自定义的实现类配置到SpringSecurity</strong></p><p>   配置到SpringSecurity</p><p>   1.先注入相对应的处理器</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</span><br></pre></td></tr></table></figure><p>​2.使用HttpSecurity对象的方法进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.exceptionHandling().authenticationEntryPoint(authenticationEntryPoint).</span><br><span class="line"> accessDeniedHandler(accessDeniedHandler);</span><br></pre></td></tr></table></figure><h2 id="六、跨域"><a href="#六、跨域" class="headerlink" title="六、跨域"></a>六、跨域</h2><p> 浏览器出于安全的考虑，使用 XMLHttpRequest对象发起 HTTP请求时必须遵守同源策略，否则就是跨域的HTTP请求，默认情况下是被禁止的。 同源策略要求源相同才能正常进行通信，即协议、域名、端口号都完全一致。</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h3><p>@Autowired默认是根据类型进行注入的，因此如果有多个类型一样的Bean候选者，则需要限定其中一个候选者，否则将抛出异常</p><p>@Qualifier限定描述符除了能根据名字进行注入，更能进行更细粒度的控制如何选择候选者</p><blockquote><p>使用@Qualifier注解，可以指定注入那个Bean</p></blockquote><p>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Service(&quot;service&quot;)</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    @Autowired</span><br><span class="line">    private UserMapper userMapper;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public JSONObject getUserList() &#123;</span><br><span class="line">        JSONObject obj = new JSONObject();</span><br><span class="line">        obj.put(&quot;service&quot;,&quot;I&#x27;m service&quot;);</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">@Service(&quot;service1&quot;)</span><br><span class="line">public class UserServiceImpl1 implements UserService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public JSONObject getUserList() &#123;</span><br><span class="line">        JSONObject obj = new JSONObject();</span><br><span class="line">        obj.put(&quot;service&quot;,&quot;I&#x27;m service1&quot;);</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    @Qualifier(&quot;service&quot;)</span><br><span class="line">    private UserService userService;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>eyJ0eXBlIjoiSldUIiwiYWxnIjoiSFM1MTIifQ.eyJzdWIiOiIxIiwiaWF0IjoxNjgzMTg4ODc0LCJleHAiOjE2ODMyNzUyNzR9.9Gh_I1I8EdMiXO1oB5wInql8G0RrdOXQFWjjKj9gcd2Fw_35n0wg6ULDGZeWQCShCIftB9hQCy2d72d8bGrzag</p><p>新eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJjMTA2OWVkM2IzZjY0NDkyODI3ZjgwNDA5N2I2ZTZhYSIsInN1YiI6IjE2NTY1NTc1NDQxMDc0MDUzMTIiLCJpc3MiOiJ0eHkiLCJpYXQiOjE2ODQxNjExNzEsImV4cCI6MTY4NDE2NDc3MX0.T_Z43SfGeFM6eik3H5mhfeJodMbnPlBTkmLecDk_FK0</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/06/17/%E5%B0%8F%E7%99%BD%E6%80%8E%E4%B9%88%E8%AF%BB%E5%BC%80%E6%BA%90/"/>
      <url>/2023/06/17/%E5%B0%8F%E7%99%BD%E6%80%8E%E4%B9%88%E8%AF%BB%E5%BC%80%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h2 id="小白怎么读开源"><a href="#小白怎么读开源" class="headerlink" title="小白怎么读开源"></a>小白怎么读开源</h2><ol><li>看简介</li><li>看代码的更新频率，计算机语言的更新速度太快，太久远的项目现在可能会更不上时代。</li><li>看项目介绍文档，查看项目的技术栈与自己的技术栈是否匹配，尽量选择自己熟悉的技术才能更好的将项目复现。</li><li>查看项目的开发文档，查看项目应该怎么启动。（先不用着急查看项目是怎么实现的，最开始我们应该是把项目跑起来）</li><li>查看项目的整体结构，一般可以通过模块的名称就可以看出项目的整体架构。</li><li>JavaWeb项目可以查看项目的pom文件，查看项目使用的依赖以及子项目。</li><li>查看项目的配置文件，查看项目的正常启动需要我们开启那些服务。</li></ol><p><strong>总结：</strong></p><p>看项目从总体到局部，先看项目的架构&#x3D;》依赖&#x3D;》关键的配置文件&#x3D;》看项目的目录结构。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>My New Post</title>
      <link href="/2023/06/16/My-New-Post/"/>
      <url>/2023/06/16/My-New-Post/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/06/16/hello-world/"/>
      <url>/2023/06/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test-category</title>
      <link href="//test-category"/>
      <url>//test-category</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> hexo config </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
